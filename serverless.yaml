# service: elearn-bot-serverless

# provider:
#   name: aws
#   runtime: nodejs12.x
#   stage: ${opt:stage, "dev"}
#   region: ap-northeast-1
    # logs:
  #   restApi: true
  # apiGateway:
  #   apiKeys:
  #     -myapikey

# stackTags:
#     Environment: ${self:provider.stage}
#     ProjectName: "E-learn"
#     Application: "E-learn Website"
#     TechOwner: "E-learn"
#     BusinessOwner: "E-learn"
#     Criticality: "major"
#     Sensitivity: "high" 

# iamRoleStatements:
#     - Effect: "Allow"
#       Action: 
#         - dynamodb:PutItem
#       Resource: arn:aws:dynamodb:ap-northeast-1:*:*

# plugins:
#   - fullstack-serverless
# custom:
#   fullstack:
#     # domain:
#     #   - ${self:custom.${self:provider.stage}.domain}
#     # certificate: ${self:custom.${self:provider.stage}.certificate_arn}
#     bucketName: ${self:service}
#     distributionFolder: /dist/test
#     indexDocument: index.html
#     compressWebContent: true
#     clientCommand: ng build
#     clientSrcPath: ./
#     noConfirm: true
#     invalidationPaths: /*
    # minimumProtocolVersion: TLSv1.2_2021



service: elearn-bot-serverless2

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, "dev"}
  region: ap-northeast-1

  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - lambda:InvokeFunction
  #     Resource: arn:aws:lambda:ap-northeast-1:647546954188:function:botCourseDetails

resources:
  Resources:
    # 1. IAM Role used by the Lex service to make runtime calls
    BotRuntimeRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lexv2.amazonaws.com
              Action:
                - "sts:AssumeRole"
        Path: "/"
        Policies:
          - PolicyName: AmazonLexV2BotPolicy
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - "lex:PostText"
                  Resource: "*"
  
    ELearnServerlessTemplateBot:
      DependsOn: BotRuntimeRole
      Type: AWS::Lex::Bot
      Properties:
        Name: "E-LearnServerlessBot"
        RoleArn: !GetAtt BotRuntimeRole.Arn
        DataPrivacy:
          ChildDirected: false
        IdleSessionTTLInSeconds: 300
        Description: "E-Learn online learning platform"
        
        AutoBuildBotLocales: false
        BotLocales:
          - LocaleId: "en_US"
            Description: "Book a trip bot Locale"
            NluConfidenceThreshold: 0.40
            
            Intents:
              - Name: "providerLogin"
                Description: "Provider Login"
                SampleUtterances:
                  - Utterance: "How to login as provider?"
                  - Utterance: "How to register as provider?"
                  - Utterance: "Provider login"
                  - Utterance: "Provider Registration"

                IntentClosingSetting:
                  ClosingResponse:
                    MessageGroupsList:
                      - Message:
                          PlainTextMessage:
                            Value: "Following are steps to login as Provider :  1) click on provider login button 2) if you are new user then click on register 3) Fill the registration form 4) Then login using registration details"
           

              - Name: "courseDetails"
                Description: "course Details"
                SampleUtterances:
                  - Utterance: "Give me details of course"
                  - Utterance: "Give me details of {course}"
                  - Utterance: "Give details of {course}"
                  - Utterance: "Give details of course"
       
                Slots:
                  - Name: "course"
                    Description: "course"
                    SlotTypeName: "AMAZON.AlphaNumeric"
                    ValueElicitationSetting:
                      SlotConstraint: "Required"
                      PromptSpecification:
                        MessageGroupsList:
                          - Message:
                              PlainTextMessage:
                                Value: "Please give me course name"
                        MaxRetries: 3
                        AllowInterrupt: false  

                FulfillmentCodeHook:
                  Enabled: true


              - Name: "StudentLogin"
                Description: "Student Login"
                SampleUtterances:
                  - Utterance: "How to login as student ?"
                  - Utterance: "How to register as student ?"
                  - Utterance: "Student login"
                  - Utterance: "Student Registration"
 
                IntentClosingSetting:
                  ClosingResponse:
                    MessageGroupsList:
                      - Message:
                          PlainTextMessage:
                            Value: "Following are steps to login as student :  1) click on student login button  2) if you are new user then click on register 3) Fill the registration form 4) Then login using registration details"



              - Name: "myProgress"
                Description: "Student Progress"
                SampleUtterances:
                  - Utterance: "How to see my progress"
                  - Utterance: "How to see my progress in course"
                  - Utterance: "Student my progress"
                  - Utterance: "my progress"
                  
                  # - Utterance: "Student Registration"
                   
                IntentClosingSetting:
                  ClosingResponse:
                    MessageGroupsList:
                      - Message:
                          PlainTextMessage:
                            Value: "Following are steps to see progress :  1) Login as Student  2) Go to my courses 3) Select the course which you want to see the course progress 4) Click on go to course button  5) Then progress will be shown in that course"



              - Name: "studentsProgress"
                Description: "Student Progress at provider side"
                SampleUtterances:
                  - Utterance: "How to see student progress"  
                  - Utterance: "I want student progress"                     
        
                IntentClosingSetting:
                  ClosingResponse:
                    MessageGroupsList:
                      - Message:
                          PlainTextMessage:
                            Value: "Following are steps to see students progress :  1) Login as Provider 2) Go to dashboard 3) Select the course in which you want to see students progress and click on go to course button 4) In the course at the bottom students progress table will be shown with their Email and Progress"



              - Name: "updateCourse"
                Description: "Provider Update Course"
                SampleUtterances:
                  - Utterance: "How to update course"  
                  - Utterance: "update course"  
        
                IntentClosingSetting:
                  ClosingResponse:
                    MessageGroupsList:
                      - Message:
                          PlainTextMessage:
                            Value: "Following are steps to update course :  1) Login as Provider  2) Go to dashboard 3) Select the course you want to update and click on go to course button 4) Then click on update button to update the course 5) Then fill the form to update the course  6) Click on Update button"         
                   
              

              - Name: "deleteCourse"
                Description: "Delete Course at provider side"
                SampleUtterances:
                  - Utterance: "How to delete course"  
                  - Utterance: "delete course"  
        
                IntentClosingSetting:
                  ClosingResponse:
                    MessageGroupsList:
                      - Message:
                          PlainTextMessage:
                            Value: "Following are steps to delete course :  1) Login as Provider  2) Go to dashboard 3) Select the course you want to delete and click on go to course button 4) Then click on delete button to delete the course 5) Then confirmation message will be display  6) Click on confirm if you want delete the course" 



              - Name: "createCourse"
                Description: "provider create course"
                SampleUtterances:
                  - Utterance: "How to create course"  
                  - Utterance: "create course"  
                  - Utterance: "how to upload course"  
                  - Utterance: "upload course"  
        
                IntentClosingSetting:
                  ClosingResponse:
                    MessageGroupsList:
                      - Message:
                          PlainTextMessage:
                            Value: "Following are steps to create course :  1) Login as Provider  2) Go to create course tab  3) Fill the form to upload the course  4) Click on upload  5) Then course will be shown in dashboard "   



              - Name: "enrollCourse"
                Description: "Enroll course"
                SampleUtterances:
                  - Utterance: "How to enroll course"  
                  - Utterance: "enroll course"  
                  - Utterance: "course enrollment"  
                  - Utterance: "enroll for course"  
        
                IntentClosingSetting:
                  ClosingResponse:
                    MessageGroupsList:
                      - Message:
                          PlainTextMessage:
                            Value: "To enroll in the course, follow these steps:  1. Login as Student   2. Go to dashboard   3. Select the course from dashboard you want to enroll 4. Click on Take Course button 5. Then course will be shown in my courses." 



              - Name: "userGreetings"
                Description: "greetings"
                SampleUtterances:
                  - Utterance: "Hello"  
                  - Utterance: "Hello bot"  
                  - Utterance: "Hello e-learn bot"  
        
                IntentClosingSetting:
                  ClosingResponse:
                    MessageGroupsList:
                      - Message:
                          PlainTextMessage:
                            Value: "Hello! How may i help you?" 


                
              - Name: "FallbackIntent"
                Description: "Default intent when no other intent matches"
                ParentIntentSignature: "AMAZON.FallbackIntent"
  
    # 3. Define a bot version which depends on the DRAFT version of the Lex Bot
    ELearnServerlessBotVersionWithCFN:
      DependsOn: ELearnServerlessTemplateBot
      Type: AWS::Lex::BotVersion
      Properties:
        BotId: !Ref ELearnServerlessTemplateBot
        BotVersionLocaleSpecification:
          - LocaleId: en_US
            BotVersionLocaleDetails:
              SourceBotVersion: DRAFT
        Description: E-Learn_Serverless Version
        
        # TestBotAliasSettings: 
        # BotAliasLocaleSettings: 
        #   - BotAliasLocaleSetting: 
        #       CodeHookSpecification:
        #         LambdaCodeHook: 
        #           CodeHookInterfaceVersion: "1.0"
        #           LambdaArn: 'arn:aws:lambda:ap-northeast-1:647546954188:function:botCourseDetails'
        #       Enabled: True
 
    FirstBotAliasWithCFN:
      DependsOn: ELearnServerlessBotVersionWithCFN
      Type: AWS::Lex::BotAlias
      Properties:
        BotId: !Ref ELearnServerlessTemplateBot
        BotAliasName: "ELearnServerlessVersion1Alias"
        # Remove BotAliasLocaleSettings if you aren't concerned with Lambda setup.
        # If you are you can modify the LambdaArn below to get started.
        BotAliasLocaleSettings:
          - LocaleId: en_US
            BotAliasLocaleSetting:
              Enabled: false
              CodeHookSpecification: 
                LambdaCodeHook:
                  CodeHookInterfaceVersion: "1.0"
                  LambdaArn: "arn:aws:lambda:ap-northeast-1:647546954188:function:botCourseDetails"
        BotVersion: !GetAtt ELearnServerlessBotVersionWithCFN.BotVersion
        SentimentAnalysisSettings:
          DetectSentiment: true


        
  
    # 4. We define the alias by providing the bot version created by the AWS::Lex::BotVersion resource above
    # FirstBotAliasWithCFN:
    #   DependsOn: ELearnServerlessBotVersionWithCFN
    #   Type: AWS::Lex::BotAlias
    #   Properties:
    #     BotId: !Ref ELearnServerlessTemplateBot
    #     BotAliasName: "ELearnServerlessVersion1Alias"
    #     # Remove BotAliasLocaleSettings if you aren't concerned with Lambda setup.
    #     # If you are you can modify the LambdaArn below to get started.
    #     BotAliasLocaleSettings:
    #       - LocaleId: en_US
    #         BotAliasLocaleSetting:
    #           Enabled: false
    #           CodeHookSpecification: 
    #             LambdaCodeHook:
    #               CodeHookInterfaceVersion: "1.0"
    #               LambdaArn: "arn:aws:lambda:ap-northeast-1:647546954188:function:botCourseDetails"
    #     BotVersion: !GetAtt ELearnServerlessBotVersionWithCFN.BotVersion
    #     SentimentAnalysisSettings:
    #       DetectSentiment: true





# Resources:
#   MyLexBot:
#     Type: 'AWS::Lex::Bot'
#     Properties:
#       Name: my-lex-bot
#       Description: My Lex Bot
#       RoleArn: 'arn:aws:iam::647546954188:role/Cognito_botElearnAuth_Role'
#       IdleSessionTTLInSeconds: 300
#       DataPrivacy:
#         ChildDirected: false
#       Intents:
#         - IntentName: my-intent
#           SampleUtterances:
#             - I want to order a {PizzaType} pizza with {Topping} toppings and {CrustType} crust
#             - I'd like a {PizzaType} with {Topping} and {CrustType}
#           Slots:
#             - Name: PizzaType
#               Description: The type of pizza to order
#               SlotType: AMAZON.Food
#               SlotTypeVersion: '1'
#             - Name: Topping
#               Description: The toppings to add to the pizza
#               SlotType: AMAZON.Food
#               SlotTypeVersion: '1'
#             - Name: CrustType
#               Description: The type of crust for the pizza
#               SlotType: AMAZON.Food
#               SlotTypeVersion: '1'
#           FulfillmentActivity:
#             Type: CodeHook
#             CodeHook:
#               Uri: !Sub 'arn:aws:lambda:ap-northeast-1:647546954188:function:botCourseDetails'
#               MessageVersion: '1.0'




            # VoiceId: Joanna
#   Resources:
#     Table:
#       Type: 'AWS::DynamoDB::Table'
#       DeletionPolicy: Retain
#       Properties:
#         AttributeDefinitions:
#           -
#             AttributeName: paintingID
#             AttributeType: S
#         KeySchema:
#           -
#             AttributeName: paintingID
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 5
#           WriteCapacityUnits: 5
#         TableName: 'gallery1'






# Git Actions 

# name: Deploy Jarvis Variety

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     name: deploy
#     runs-on: ubuntu-latest
# #     strategy:
# #       matrix:
# #         node-version: [12.x]
#     steps:
#     - uses: actions/checkout@v2
#     - uses: actions/setup-node@v2
#       with:
#           node-version: "14.x"
#     - name: Set up Python 3.10
#       uses: actions/setup-python@v4
#       with:
#           python-version: "3.10"
#     - name: Install fullstack-serverless
#       run: npm install --save-dev fullstack-serverless
#     - name: Install serverless-webpack
#       run: npm install serverless-webpack --save-dev
#     - name: Install Serverless Hosted Zone Plugin
#       run: npm i serverless-hosted-zone
#     - name: Install Serverless Framework
#       run: npm install -g serverless
#     - name: Install Angular CLI
#       run: npm install -g @angular/cli
#     - name: Install Packages
#       run: npm install
#     - name: Serverless AWS Authentication
#       run: sls config cr





# https://awscli.amazonaws.com/AWSCLIV2.msi

# npm install -g aws-cli
# npm install --save-dev fullstack-serverless
# npm install -g serverless
# aws configure
# AKIATGVDRD2ZW3CMTSZQ
# weJRIVwMMLkMaWYCCMeS8BzZxjOvkS3I7ZMg1h2r




# service: elearn-bot

# provider:
#   name: aws
#   runtime: nodejs12.x
#   stage: ${opt:stage, "dev"}
#   region: ${opt:region, "ap-northeast-1"}
#   logs:
#     restApi: true
#   apiGateway:
#     apiKeys:
#       -myapikey

# stackTags:
#     Environment: ${self:provider.stage}
#     ProjectName: "E-learn"
#     Application: "E-learn Website"
#     TechOwner: "E-learn"
#     BusinessOwner: "E-learn"
#     Criticality: "major"
#     Sensitivity: "high" 

# iamRoleStatements:
#     - Effect: "Allow"
#       Action:
# - dynamodb:PutItem
#       Resource: arn:aws:dynamodb:ap-northeast-1::

# plugins:
#   - fullstack-serverless
# custom:
#   fullstack:
#     # domain:
#     #   - ${self:custom.${self:provider.stage}.domain}
#     # certificate: ${self:custom.${self:provider.stage}.certificate_arn}
#     bucketName: ${self:service}
#     distributionFolder: /dist/test         
#     indexDocument: index.html
#     compressWebContent: true
#     clientCommand: ng build
#     clientSrcPath: ./
#     noConfirm: true
#     invalidationPaths: /*
#     minimumProtocolVersion: TLSv1.2_2021
                         

# sls deploy
